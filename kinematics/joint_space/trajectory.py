'''   Header
@file:          trajectory.py
@brief:    	    This module provides a class containing a trajectory in the jointspace.
                The path is generated by a number of key points containing joint configurations, 
                joint velocities, accelerations and corresponding phase phi
                
@author:        Nima Ramezani Taghiabadi
                PhD Researcher
                Faculty of Engineering and Information Technology
                University of Technology Sydney (UTS)
                Broadway, Ultimo, NSW 2007, Australia
                Room No.: CB10.03.512
                Phone:    02 9514 4621
                Mobile:   04 5027 4611
                Email(1): Nima.RamezaniTaghiabadi@student.uts.edu.au 
                Email(2): nima.ramezani@gmail.com
                Email(3): nima_ramezani@yahoo.com
                Email(4): ramezanitn@alum.sharif.edu
@version:	    1

Last Revision:  10 September 2014

'''

import packages.nima.robotics.kinematics.task_space.trajectory as trajlib
from packages.nima.mathematics import general as gen


class Joint_Trajectory(trajlib.Polynomial_Trajectory):

    def __init__(self, dof):
        super(Joint_Trajectory, self).__init__(dimension = dof)
        self.capacity = 5

    def fix_points(self):

        pp = [self.segment[0].point[0].pos[j] for j in range(self.dim)] # keep previous pos
        for seg in self.segment:
            for pnt in seg.point:
                for j in range(self.dim):
                    if abs(pnt.pos[j] - pp[j]) > math.pi: # if there is gap between points
                        seg.interpolated = False
                        if pp[j] > 0:
                            pnt.pos[j] = pnt.pos[j] + 2*math.pi
                        else:
                            pnt.pos[j] = pnt.pos[j] - 2*math.pi
               
                    pp[j] = pnt.pos[j]
